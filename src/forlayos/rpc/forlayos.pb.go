// Code generated by protoc-gen-go. DO NOT EDIT.
// source: forlayos.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	forlayos.proto

It has these top-level messages:
	Empty
	Forlayo
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Mensaje vacío ya qu eno esperamos ningún parametro de entrada
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Tipo forlayo para la respuesta
type Forlayo struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Number int32   `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Price  float32 `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
}

func (m *Forlayo) Reset()                    { *m = Forlayo{} }
func (m *Forlayo) String() string            { return proto.CompactTextString(m) }
func (*Forlayo) ProtoMessage()               {}
func (*Forlayo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Forlayo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Forlayo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Forlayo) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Forlayo) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
	proto.RegisterType((*Forlayo)(nil), "rpc.Forlayo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Forlayos service

type ForlayosClient interface {
	ListForlayos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Forlayos_ListForlayosClient, error)
}

type forlayosClient struct {
	cc *grpc.ClientConn
}

func NewForlayosClient(cc *grpc.ClientConn) ForlayosClient {
	return &forlayosClient{cc}
}

func (c *forlayosClient) ListForlayos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Forlayos_ListForlayosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Forlayos_serviceDesc.Streams[0], c.cc, "/rpc.Forlayos/ListForlayos", opts...)
	if err != nil {
		return nil, err
	}
	x := &forlayosListForlayosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Forlayos_ListForlayosClient interface {
	Recv() (*Forlayo, error)
	grpc.ClientStream
}

type forlayosListForlayosClient struct {
	grpc.ClientStream
}

func (x *forlayosListForlayosClient) Recv() (*Forlayo, error) {
	m := new(Forlayo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Forlayos service

type ForlayosServer interface {
	ListForlayos(*Empty, Forlayos_ListForlayosServer) error
}

func RegisterForlayosServer(s *grpc.Server, srv ForlayosServer) {
	s.RegisterService(&_Forlayos_serviceDesc, srv)
}

func _Forlayos_ListForlayos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForlayosServer).ListForlayos(m, &forlayosListForlayosServer{stream})
}

type Forlayos_ListForlayosServer interface {
	Send(*Forlayo) error
	grpc.ServerStream
}

type forlayosListForlayosServer struct {
	grpc.ServerStream
}

func (x *forlayosListForlayosServer) Send(m *Forlayo) error {
	return x.ServerStream.SendMsg(m)
}

var _Forlayos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Forlayos",
	HandlerType: (*ForlayosServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListForlayos",
			Handler:       _Forlayos_ListForlayos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "forlayos.proto",
}

func init() { proto.RegisterFile("forlayos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcb, 0x2f, 0xca,
	0x49, 0xac, 0xcc, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56,
	0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0x8a, 0xe6, 0x62, 0x77, 0x83, 0xc8, 0x0b,
	0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31, 0x65, 0xa6, 0x08,
	0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x81, 0x45, 0xc0, 0x6c, 0x21, 0x31, 0x2e,
	0xb6, 0xbc, 0xd2, 0xdc, 0xa4, 0xd4, 0x22, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f,
	0x48, 0x84, 0x8b, 0xb5, 0xa0, 0x28, 0x33, 0x39, 0x55, 0x82, 0x45, 0x81, 0x51, 0x83, 0x29, 0x08,
	0xc2, 0x31, 0xb2, 0xe0, 0xe2, 0x80, 0x1a, 0x5e, 0x2c, 0xa4, 0xc3, 0xc5, 0xe3, 0x93, 0x59, 0x5c,
	0x02, 0xe7, 0x73, 0xe9, 0x15, 0x15, 0x24, 0xeb, 0x81, 0x1d, 0x21, 0xc5, 0x03, 0x66, 0x43, 0xa5,
	0x94, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x6e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x26,
	0x46, 0x61, 0x74, 0xbd, 0x00, 0x00, 0x00,
}
